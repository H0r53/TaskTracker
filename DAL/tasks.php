<?php
/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/18/2017
Description:	Creates the DAL class for  tasks table and respective stored procedures

*/



class Tasks {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $TaskID;
	protected $TaskName;
	protected $Description;
	protected $AssigneeAccountID;
	protected $ReporterAccountID;
	protected $StatusTypeID;
	protected $TaskTypeID;
	protected $PriorityTypeID;
	protected $ProjectID;
	protected $CreateDate;
	protected $CloseDate;
	protected $ReopenDate;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 12:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7], $argv[8], $argv[9], $argv[10], $argv[11] );
		}
	}


	public function __constructBase() {
		$this->TaskID = 0;
		$this->TaskName = "";
		$this->Description = "";
		$this->AssigneeAccountID = 0;
		$this->ReporterAccountID = 0;
		$this->StatusTypeID = 0;
		$this->TaskTypeID = 0;
		$this->PriorityTypeID = 0;
		$this->ProjectID = 0;
		$this->CreateDate = "";
		$this->CloseDate = "";
		$this->ReopenDate = "";
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramTaskID,$paramTaskName,$paramDescription,$paramAssigneeAccountID,$paramReporterAccountID,$paramStatusTypeID,$paramTaskTypeID,$paramPriorityTypeID,$paramProjectID,$paramCreateDate,$paramCloseDate,$paramReopenDate) {
		$this->TaskID = $paramTaskID;
		$this->TaskName = $paramTaskName;
		$this->Description = $paramDescription;
		$this->AssigneeAccountID = $paramAssigneeAccountID;
		$this->ReporterAccountID = $paramReporterAccountID;
		$this->StatusTypeID = $paramStatusTypeID;
		$this->TaskTypeID = $paramTaskTypeID;
		$this->PriorityTypeID = $paramPriorityTypeID;
		$this->ProjectID = $paramProjectID;
		$this->CreateDate = $paramCreateDate;
		$this->CloseDate = $paramCloseDate;
		$this->ReopenDate = $paramReopenDate;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getTaskID(){
		return $this->TaskID;
	}
	public function setTaskID($value){
		$this->TaskID = $value;
	}
	public function getTaskName(){
		return $this->TaskName;
	}
	public function setTaskName($value){
		$this->TaskName = $value;
	}
	public function getDescription(){
		return $this->Description;
	}
	public function setDescription($value){
		$this->Description = $value;
	}
	public function getAssigneeAccountID(){
		return $this->AssigneeAccountID;
	}
	public function setAssigneeAccountID($value){
		$this->AssigneeAccountID = $value;
	}
	public function getReporterAccountID(){
		return $this->ReporterAccountID;
	}
	public function setReporterAccountID($value){
		$this->ReporterAccountID = $value;
	}
	public function getStatusTypeID(){
		return $this->StatusTypeID;
	}
	public function setStatusTypeID($value){
		$this->StatusTypeID = $value;
	}
	public function getTaskTypeID(){
		return $this->TaskTypeID;
	}
	public function setTaskTypeID($value){
		$this->TaskTypeID = $value;
	}
	public function getPriorityTypeID(){
		return $this->PriorityTypeID;
	}
	public function setPriorityTypeID($value){
		$this->PriorityTypeID = $value;
	}
	public function getProjectID(){
		return $this->ProjectID;
	}
	public function setProjectID($value){
		$this->ProjectID = $value;
	}
	public function getCreateDate(){
		return $this->CreateDate;
	}
	public function setCreateDate($value){
		$this->CreateDate = $value;
	}
	public function getCloseDate(){
		return $this->CloseDate;
	}
	public function setCloseDate($value){
		$this->CloseDate = $value;
	}
	public function getReopenDate(){
		return $this->ReopenDate;
	}
	public function setReopenDate($value){
		$this->ReopenDate = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_tasks_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setTaskID($row['TaskID']);
		 $this->setTaskName($row['TaskName']);
		 $this->setDescription($row['Description']);
		 $this->setAssigneeAccountID($row['AssigneeAccountID']);
		 $this->setReporterAccountID($row['ReporterAccountID']);
		 $this->setStatusTypeID($row['StatusTypeID']);
		 $this->setTaskTypeID($row['TaskTypeID']);
		 $this->setPriorityTypeID($row['PriorityTypeID']);
		 $this->setProjectID($row['ProjectID']);
		 $this->setCreateDate($row['CreateDate']);
		 $this->setCloseDate($row['CloseDate']);
		 $this->setReopenDate($row['ReopenDate']);
		}
	}


	public function save() {
		if ($this->getTaskID() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_tasks_Add(?,?,?,?,?,?,?,?,?,?,?)');
		$arg1 = $this->getTaskName();
		$arg2 = $this->getDescription();
		$arg3 = $this->getAssigneeAccountID();
		$arg4 = $this->getReporterAccountID();
		$arg5 = $this->getStatusTypeID();
		$arg6 = $this->getTaskTypeID();
		$arg7 = $this->getPriorityTypeID();
		$arg8 = $this->getProjectID();
		$arg9 = $this->getCreateDate();
		$arg10 = $this->getCloseDate();
		$arg11 = $this->getReopenDate();
		$stmt->bind_param('ssiiiiiisss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9,$arg10,$arg11);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_tasks_Update(?,?,?,?,?,?,?,?,?,?,?,?)');
		$arg1 = $this->getTaskID();
		$arg2 = $this->getTaskName();
		$arg3 = $this->getDescription();
		$arg4 = $this->getAssigneeAccountID();
		$arg5 = $this->getReporterAccountID();
		$arg6 = $this->getStatusTypeID();
		$arg7 = $this->getTaskTypeID();
		$arg8 = $this->getPriorityTypeID();
		$arg9 = $this->getProjectID();
		$arg10 = $this->getCreateDate();
		$arg11 = $this->getCloseDate();
		$arg12 = $this->getReopenDate();
		$stmt->bind_param('issiiiiiisss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9,$arg10,$arg11,$arg12);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_tasks_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$tasks = new Tasks($row['TaskID'],$row['TaskName'],$row['Description'],$row['AssigneeAccountID'],$row['ReporterAccountID'],$row['StatusTypeID'],$row['TaskTypeID'],$row['PriorityTypeID'],$row['ProjectID'],$row['CreateDate'],$row['CloseDate'],$row['ReopenDate']);
				$arr[] = $tasks;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_tasks_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramTaskID,$paramTaskName,$paramDescription,$paramAssigneeAccountID,$paramReporterAccountID,$paramStatusTypeID,$paramTaskTypeID,$paramPriorityTypeID,$paramProjectID,$paramCreateDate,$paramCloseDate,$paramReopenDate) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_tasks_Search(?,?,?,?,?,?,?,?,?,?,?,?)');
		$arg1 = Tasks::setNullValue($paramTaskID);
		$arg2 = Tasks::setNullValue($paramTaskName);
		$arg3 = Tasks::setNullValue($paramDescription);
		$arg4 = Tasks::setNullValue($paramAssigneeAccountID);
		$arg5 = Tasks::setNullValue($paramReporterAccountID);
		$arg6 = Tasks::setNullValue($paramStatusTypeID);
		$arg7 = Tasks::setNullValue($paramTaskTypeID);
		$arg8 = Tasks::setNullValue($paramPriorityTypeID);
		$arg9 = Tasks::setNullValue($paramProjectID);
		$arg10 = Tasks::setNullValue($paramCreateDate);
		$arg11 = Tasks::setNullValue($paramCloseDate);
		$arg12 = Tasks::setNullValue($paramReopenDate);
		$stmt->bind_param('issiiiiiisss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9,$arg10,$arg11,$arg12);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$tasks = new Tasks($row['TaskID'],$row['TaskName'],$row['Description'],$row['AssigneeAccountID'],$row['ReporterAccountID'],$row['StatusTypeID'],$row['TaskTypeID'],$row['PriorityTypeID'],$row['ProjectID'],$row['CreateDate'],$row['CloseDate'],$row['ReopenDate']);
				$arr[] = $tasks;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
	
	public static function loadbyaccountid($paramAccountID) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_tasks_LoadByAccountID(?)');
		$stmt->bind_param('i', $paramAccountID);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$tasks = new Tasks($row['TaskID'],$row['TaskName'],$row['Description'],$row['AssigneeAccountID'],$row['ReporterAccountID'],$row['StatusTypeID'],$row['TaskTypeID'],$row['PriorityTypeID'],$row['ProjectID'],$row['CreateDate'],$row['CloseDate'],$row['ReopenDate']);
				$arr[] = $tasks;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
}
