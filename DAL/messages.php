<?php
/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			11/18/2017
Description:	Creates the DAL class for  messages table and respective stored procedures

*/



class Messages {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $MessageID;
	protected $Description;
	protected $SenderAccountID;
	protected $RecipientAccountID;
	protected $SentDate;
	protected $Seen;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 6:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5] );
		}
	}


	public function __constructBase() {
		$this->MessageID = 0;
		$this->Description = "";
		$this->SenderAccountID = 0;
		$this->RecipientAccountID = 0;
		$this->SentDate = "";
		$this->Seen = 0;
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramMessageID,$paramDescription,$paramSenderAccountID,$paramRecipientAccountID,$paramSentDate,$paramSeen) {
		$this->MessageID = $paramMessageID;
		$this->Description = $paramDescription;
		$this->SenderAccountID = $paramSenderAccountID;
		$this->RecipientAccountID = $paramRecipientAccountID;
		$this->SentDate = $paramSentDate;
		$this->Seen = $paramSeen;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getMessageID(){
		return $this->MessageID;
	}
	public function setMessageID($value){
		$this->MessageID = $value;
	}
	public function getDescription(){
		return $this->Description;
	}
	public function setDescription($value){
		$this->Description = $value;
	}
	public function getSenderAccountID(){
		return $this->SenderAccountID;
	}
	public function setSenderAccountID($value){
		$this->SenderAccountID = $value;
	}
	public function getRecipientAccountID(){
		return $this->RecipientAccountID;
	}
	public function setRecipientAccountID($value){
		$this->RecipientAccountID = $value;
	}
	public function getSentDate(){
		return $this->SentDate;
	}
	public function setSentDate($value){
		$this->SentDate = $value;
	}
	public function getSeen(){
		return $this->Seen;
	}
	public function setSeen($value){
		$this->Seen = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_messages_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setMessageID($row['MessageID']);
		 $this->setDescription($row['Description']);
		 $this->setSenderAccountID($row['SenderAccountID']);
		 $this->setRecipientAccountID($row['RecipientAccountID']);
		 $this->setSentDate($row['SentDate']);
		 $this->setSeen($row['Seen']);
		}
	}


	public function save() {
		if ($this->getMessageID() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_messages_Add(?,?,?,?,?)');
		$arg1 = $this->getDescription();
		$arg2 = $this->getSenderAccountID();
		$arg3 = $this->getRecipientAccountID();
		$arg4 = $this->getSentDate();
		$arg5 = $this->getSeen();
		$stmt->bind_param('siisi',$arg1,$arg2,$arg3,$arg4,$arg5);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_messages_Update(?,?,?,?,?,?)');
		$arg1 = $this->getMessageID();
		$arg2 = $this->getDescription();
		$arg3 = $this->getSenderAccountID();
		$arg4 = $this->getRecipientAccountID();
		$arg5 = $this->getSentDate();
		$arg6 = $this->getSeen();
		$stmt->bind_param('isiisi',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_messages_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$messages = new Messages($row['MessageID'],$row['Description'],$row['SenderAccountID'],$row['RecipientAccountID'],$row['SentDate'],$row['Seen']);
				$arr[] = $messages;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_messages_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramMessageID,$paramDescription,$paramSenderAccountID,$paramRecipientAccountID,$paramSentDate,$paramSeen) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_messages_Search(?,?,?,?,?,?)');
		$arg1 = Messages::setNullValue($paramMessageID);
		$arg2 = Messages::setNullValue($paramDescription);
		$arg3 = Messages::setNullValue($paramSenderAccountID);
		$arg4 = Messages::setNullValue($paramRecipientAccountID);
		$arg5 = Messages::setNullValue($paramSentDate);
		$arg6 = Messages::setNullValue($paramSeen);
		$stmt->bind_param('isiisi',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$messages = new Messages($row['MessageID'],$row['Description'],$row['SenderAccountID'],$row['RecipientAccountID'],$row['SentDate'],$row['Seen']);
				$arr[] = $messages;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
    public static function loadbyrecipientaccountid($paramAccountID) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_messages_LoadByRecipientAccountID(?)');
        $stmt->bind_param('i', $paramAccountID);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $messages = new Messages($row['MessageID'],$row['Description'],$row['SenderAccountID'],$row['RecipientAccountID'],$row['SentDate'],$row['Seen']);
                $arr[] = $messages;
            }
            return $arr;
        }
        else {
            //echo "No new messages";
        }
    }
}
