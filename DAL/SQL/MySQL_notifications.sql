/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/18/2017
Description:	Creates the notifications table and respective stored procedures

*/


USE smithadb;



-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `smithadb`.`notifications` (
NotificationID INT AUTO_INCREMENT,
AccountID INT,
TaskID INT,
NotificationTypeID INT,
CONSTRAINT pk_notifications_NotificationID PRIMARY KEY (NotificationID)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_notifications_Load`
(
	 IN paramNotificationID INT
)
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`
	FROM `notifications`
	WHERE 		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_notifications_LoadAll`()
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`
	FROM `notifications`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_notifications_Add`
(
	 IN paramAccountID INT,
	 IN paramTaskID INT,
	 IN paramNotificationTypeID INT
)
BEGIN
	INSERT INTO `notifications` (AccountID,TaskID,NotificationTypeID)
	VALUES (paramAccountID, paramTaskID, paramNotificationTypeID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_notifications_Update`
(
	IN paramNotificationID INT,
	IN paramAccountID INT,
	IN paramTaskID INT,
	IN paramNotificationTypeID INT
)
BEGIN
	UPDATE `notifications`
	SET AccountID = paramAccountID
		,TaskID = paramTaskID
		,NotificationTypeID = paramNotificationTypeID
	WHERE		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_notifications_Delete`
(
	IN paramNotificationID INT
)
BEGIN
	DELETE FROM `notifications`
	WHERE		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_notifications_Search`
(
	IN paramNotificationID INT,
	IN paramAccountID INT,
	IN paramTaskID INT,
	IN paramNotificationTypeID INT
)
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`
	FROM `notifications`
	WHERE
		COALESCE(notifications.`NotificationID`,0) = COALESCE(paramNotificationID,notifications.`NotificationID`,0)
		AND COALESCE(notifications.`AccountID`,0) = COALESCE(paramAccountID,notifications.`AccountID`,0)
		AND COALESCE(notifications.`TaskID`,0) = COALESCE(paramTaskID,notifications.`TaskID`,0)
		AND COALESCE(notifications.`NotificationTypeID`,0) = COALESCE(paramNotificationTypeID,notifications.`NotificationTypeID`,0);
END //
DELIMITER ;


