/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/18/2017
Description:	Creates the comments table and respective stored procedures

*/


USE smithadb;



--------------------------------------------------------------
-- Create table
--------------------------------------------------------------



CREATE TABLE `smithadb`.`comments` (
CommentID INT AUTO_INCREMENT,
AccountID INT,
Description VARCHAR(1025),
TaskID INT,
CommentStatusTypeID INT,
CONSTRAINT pk_comments_CommentID PRIMARY KEY (CommentID)
);


--------------------------------------------------------------
-- Create default SCRUD sprocs for this table
--------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_comments_Load`
(
	 IN paramCommentID INT
)
BEGIN
	SELECT
		`comments`.`CommentID` AS `CommentID`,
		`comments`.`AccountID` AS `AccountID`,
		`comments`.`Description` AS `Description`,
		`comments`.`TaskID` AS `TaskID`,
		`comments`.`CommentStatusTypeID` AS `CommentStatusTypeID`
	FROM `comments`
	WHERE 		`comments`.`CommentID` = paramCommentID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_comments_LoadAll`()
BEGIN
	SELECT
		`comments`.`CommentID` AS `CommentID`,
		`comments`.`AccountID` AS `AccountID`,
		`comments`.`Description` AS `Description`,
		`comments`.`TaskID` AS `TaskID`,
		`comments`.`CommentStatusTypeID` AS `CommentStatusTypeID`
	FROM `comments`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_comments_Add`
(
	 IN paramAccountID INT,
	 IN paramDescription VARCHAR(1025),
	 IN paramTaskID INT,
	 IN paramCommentStatusTypeID INT
)
BEGIN
	INSERT INTO `comments` (AccountID,Description,TaskID,CommentStatusTypeID)
	VALUES (paramAccountID, paramDescription, paramTaskID, paramCommentStatusTypeID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_comments_Update`
(
	IN paramCommentID INT,
	IN paramAccountID INT,
	IN paramDescription VARCHAR(1025),
	IN paramTaskID INT,
	IN paramCommentStatusTypeID INT
)
BEGIN
	UPDATE `comments`
	SET AccountID = paramAccountID
		,Description = paramDescription
		,TaskID = paramTaskID
		,CommentStatusTypeID = paramCommentStatusTypeID
	WHERE		`comments`.`CommentID` = paramCommentID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_comments_Delete`
(
	IN paramCommentID INT
)
BEGIN
	DELETE FROM `comments`
	WHERE		`comments`.`CommentID` = paramCommentID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `smithadb`.`usp_comments_Search`
(
	IN paramCommentID INT,
	IN paramAccountID INT,
	IN paramDescription VARCHAR(1025),
	IN paramTaskID INT,
	IN paramCommentStatusTypeID INT
)
BEGIN
	SELECT
		`comments`.`CommentID` AS `CommentID`,
		`comments`.`AccountID` AS `AccountID`,
		`comments`.`Description` AS `Description`,
		`comments`.`TaskID` AS `TaskID`,
		`comments`.`CommentStatusTypeID` AS `CommentStatusTypeID`
	FROM `comments`
	WHERE
		COALESCE(comments.`CommentID`,0) = COALESCE(paramCommentID,comments.`CommentID`,0)
		AND COALESCE(comments.`AccountID`,0) = COALESCE(paramAccountID,comments.`AccountID`,0)
		AND COALESCE(comments.`Description`,'') = COALESCE(paramDescription,comments.`Description`,'')
		AND COALESCE(comments.`TaskID`,0) = COALESCE(paramTaskID,comments.`TaskID`,0)
		AND COALESCE(comments.`CommentStatusTypeID`,0) = COALESCE(paramCommentStatusTypeID,comments.`CommentStatusTypeID`,0);
END //
DELIMITER ;


