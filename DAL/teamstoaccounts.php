<?php
/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/24/2017
Description:	Creates the DAL class for  teamstoaccounts table and respective stored procedures

*/



class Teamstoaccounts {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $TeamToAccountID;
	protected $TeamID;
	protected $AccountID;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 3:
				self::__constructFull( $argv[0], $argv[1], $argv[2] );
		}
	}


	public function __constructBase() {
		$this->TeamToAccountID = 0;
		$this->TeamID = 0;
		$this->AccountID = 0;
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramTeamToAccountID,$paramTeamID,$paramAccountID) {
		$this->TeamToAccountID = $paramTeamToAccountID;
		$this->TeamID = $paramTeamID;
		$this->AccountID = $paramAccountID;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getTeamToAccountID(){
		return $this->TeamToAccountID;
	}
	public function setTeamToAccountID($value){
		$this->TeamToAccountID = $value;
	}
	public function getTeamID(){
		return $this->TeamID;
	}
	public function setTeamID($value){
		$this->TeamID = $value;
	}
	public function getAccountID(){
		return $this->AccountID;
	}
	public function setAccountID($value){
		$this->AccountID = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_teamstoaccounts_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setTeamToAccountID($row['TeamToAccountID']);
		 $this->setTeamID($row['TeamID']);
		 $this->setAccountID($row['AccountID']);
		}
	}


	public function save() {
		if ($this->getTeamToAccountID() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_teamstoaccounts_Add(?,?)');
		$arg1 = $this->getTeamID();
		$arg2 = $this->getAccountID();
		$stmt->bind_param('ii',$arg1,$arg2);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_teamstoaccounts_Update(?,?,?)');
		$arg1 = $this->getTeamToAccountID();
		$arg2 = $this->getTeamID();
		$arg3 = $this->getAccountID();
		$stmt->bind_param('iii',$arg1,$arg2,$arg3);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_teamstoaccounts_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$teamstoaccounts = new Teamstoaccounts($row['TeamToAccountID'],$row['TeamID'],$row['AccountID']);
				$arr[] = $teamstoaccounts;
			}
			return $arr;
		}
		else {
			return array();
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_teamstoaccounts_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramTeamToAccountID,$paramTeamID,$paramAccountID) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_teamstoaccounts_Search(?,?,?)');
		$arg1 = Teamstoaccounts::setNullValue($paramTeamToAccountID);
		$arg2 = Teamstoaccounts::setNullValue($paramTeamID);
		$arg3 = Teamstoaccounts::setNullValue($paramAccountID);
		$stmt->bind_param('iii',$arg1,$arg2,$arg3);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$teamstoaccounts = new Teamstoaccounts($row['TeamToAccountID'],$row['TeamID'],$row['AccountID']);
				$arr[] = $teamstoaccounts;
			}
			return $arr;
		}
		else {
			return array();
		}
	}
    public static function loadbyaccountid($paramAccountID) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_teamstoaccounts_LoadByAccountID(?)');
        $stmt->bind_param('i', $paramAccountID);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $teamstoaccounts = new Teamstoaccounts($row['TeamToAccountID'],$row['TeamID'],$row['AccountID']);
                $arr[] = $teamstoaccounts;
            }
            return $arr;
        }
        else {
            return array();
        }
    }
}
