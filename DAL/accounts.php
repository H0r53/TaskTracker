<?php
/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/29/2017
Description:	Creates the DAL class for  accounts table and respective stored procedures

*/



class Accounts {

    // This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
    protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

    /******************************************************************/
    // Properties
    /******************************************************************/

    protected $AccountID;
    protected $FirstName;
    protected $LastName;
    protected $Email;
    protected $Password;
    protected $Bio;
    protected $RoleID;
    protected $ImgURL;
    protected $DateOfBirth;
    protected $Location;
    protected $CreateDate;


    /******************************************************************/
    // Constructors
    /******************************************************************/
    public function __construct() {
        $argv = func_get_args();
        switch( func_num_args() ) {
            case 0:
                self::__constructBase();
                break;
            case 1:
                self::__constructPK( $argv[0] );
                break;
            case 11:
                self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7], $argv[8], $argv[9], $argv[10] );
        }
    }


    public function __constructBase() {
        $this->AccountID = 0;
        $this->FirstName = "";
        $this->LastName = "";
        $this->Email = "";
        $this->Password = "";
        $this->Bio = "";
        $this->RoleID = 0;
        $this->ImgURL = "";
        $this->DateOfBirth = "";
        $this->Location = "";
        $this->CreateDate = "";
    }


    public function __constructPK($paramId) {
        $this->load($paramId);
    }


    public function __constructFull($paramAccountID,$paramFirstName,$paramLastName,$paramEmail,$paramPassword,$paramBio,$paramRoleID,$paramImgURL,$paramDateOfBirth,$paramLocation,$paramCreateDate) {
        $this->AccountID = $paramAccountID;
        $this->FirstName = $paramFirstName;
        $this->LastName = $paramLastName;
        $this->Email = $paramEmail;
        $this->Password = $paramPassword;
        $this->Bio = $paramBio;
        $this->RoleID = $paramRoleID;
        $this->ImgURL = $paramImgURL;
        $this->DateOfBirth = $paramDateOfBirth;
        $this->Location = $paramLocation;
        $this->CreateDate = $paramCreateDate;
    }


    /******************************************************************/
    // Accessors / Mutators
    /******************************************************************/

    public function getAccountID(){
        return $this->AccountID;
    }
    public function setAccountID($value){
        $this->AccountID = $value;
    }
    public function getFirstName(){
        return $this->FirstName;
    }
    public function setFirstName($value){
        $this->FirstName = $value;
    }
    public function getLastName(){
        return $this->LastName;
    }
    public function setLastName($value){
        $this->LastName = $value;
    }
    public function getEmail(){
        return $this->Email;
    }
    public function setEmail($value){
        $this->Email = $value;
    }
    public function getPassword(){
        return $this->Password;
    }
    public function setPassword($value){
        $this->Password = $value;
    }
    public function getBio(){
        return $this->Bio;
    }
    public function setBio($value){
        $this->Bio = $value;
    }
    public function getRoleID(){
        return $this->RoleID;
    }
    public function setRoleID($value){
        $this->RoleID = $value;
    }
    public function getImgURL(){
        return $this->ImgURL;
    }
    public function setImgURL($value){
        $this->ImgURL = $value;
    }
    public function getDateOfBirth(){
        return $this->DateOfBirth;
    }
    public function setDateOfBirth($value){
        $this->DateOfBirth = $value;
    }
    public function getLocation(){
        return $this->Location;
    }
    public function setLocation($value){
        $this->Location = $value;
    }
    public function getCreateDate(){
        return $this->CreateDate;
    }
    public function setCreateDate($value){
        $this->CreateDate = $value;
    }


    /******************************************************************/
    // Public Methods
    /******************************************************************/


    public function load($paramId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_accounts_Load(?)');
        $stmt->bind_param('i', $paramId);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);

        while ($row = $result->fetch_assoc()) {
            $this->setAccountID($row['AccountID']);
            $this->setFirstName($row['FirstName']);
            $this->setLastName($row['LastName']);
            $this->setEmail($row['Email']);
            $this->setPassword($row['Password']);
            $this->setBio($row['Bio']);
            $this->setRoleID($row['RoleID']);
            $this->setImgURL($row['ImgURL']);
            $this->setDateOfBirth($row['DateOfBirth']);
            $this->setLocation($row['Location']);
            $this->setCreateDate($row['CreateDate']);
        }
    }


    public function save() {
        if ($this->getAccountID() == 0)
            $this->insert();
        else
            $this->update();
    }

    /******************************************************************/
    // Private Methods
    /******************************************************************/



    private function insert() {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_accounts_Add(?,?,?,?,?,?,?,?,?,?)');
        $arg1 = $this->getFirstName();
        $arg2 = $this->getLastName();
        $arg3 = $this->getEmail();
        $arg4 = $this->getPassword();
        $arg5 = $this->getBio();
        $arg6 = $this->getRoleID();
        $arg7 = $this->getImgURL();
        $arg8 = $this->getDateOfBirth();
        $arg9 = $this->getLocation();
        $arg10 = $this->getCreateDate();
        $stmt->bind_param('sssssissss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9,$arg10);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        while ($row = $result->fetch_assoc()) {
            // By default, the DALGen generated INSERT procedure returns the scope identity as id
            $this->load($row['id']);
        }
    }


    private function update() {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_accounts_Update(?,?,?,?,?,?,?,?,?,?,?)');
        $arg1 = $this->getAccountID();
        $arg2 = $this->getFirstName();
        $arg3 = $this->getLastName();
        $arg4 = $this->getEmail();
        $arg5 = $this->getPassword();
        $arg6 = $this->getBio();
        $arg7 = $this->getRoleID();
        $arg8 = $this->getImgURL();
        $arg9 = $this->getDateOfBirth();
        $arg10 = $this->getLocation();
        $arg11 = $this->getCreateDate();
        $stmt->bind_param('isssssissss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9,$arg10,$arg11);
        $stmt->execute();
    }

    private static function setNullValue($value){
        if ($value == "")
            return null;
        else
            return $value;
    }

    /******************************************************************/
    // Static Methods
    /******************************************************************/



    public static function loadall() {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_accounts_LoadAll()');
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $accounts = new Accounts($row['AccountID'],$row['FirstName'],$row['LastName'],$row['Email'],$row['Password'],$row['Bio'],$row['RoleID'],$row['ImgURL'],$row['DateOfBirth'],$row['Location'],$row['CreateDate']);
                $arr[] = $accounts;
            }
            return $arr;
        }
        else {
            return array();
        }
    }


    public static function remove($paramId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_accounts_Remove(?)');
        $stmt->bind_param('i', $paramId);
        $stmt->execute();
    }


    public static function search($paramAccountID,$paramFirstName,$paramLastName,$paramEmail,$paramPassword,$paramBio,$paramRoleID,$paramImgURL,$paramDateOfBirth,$paramLocation,$paramCreateDate) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_accounts_Search(?,?,?,?,?,?,?,?,?,?,?)');
        $arg1 = Accounts::setNullValue($paramAccountID);
        $arg2 = Accounts::setNullValue($paramFirstName);
        $arg3 = Accounts::setNullValue($paramLastName);
        $arg4 = Accounts::setNullValue($paramEmail);
        $arg5 = Accounts::setNullValue($paramPassword);
        $arg6 = Accounts::setNullValue($paramBio);
        $arg7 = Accounts::setNullValue($paramRoleID);
        $arg8 = Accounts::setNullValue($paramImgURL);
        $arg9 = Accounts::setNullValue($paramDateOfBirth);
        $arg10 = Accounts::setNullValue($paramLocation);
        $arg11 = Accounts::setNullValue($paramCreateDate);
        $stmt->bind_param('isssssissss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9,$arg10,$arg11);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $accounts = new Accounts($row['AccountID'],$row['FirstName'],$row['LastName'],$row['Email'],$row['Password'],$row['Bio'],$row['RoleID'],$row['ImgURL'],$row['DateOfBirth'],$row['Location'],$row['CreateDate']);
                $arr[] = $accounts;
            }
            return $arr;
        }
        else {
            return array();
        }
    }
    public static function lookup($paramEmail) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_account_Lookup(?)');
        $arg1 = Accounts::setNullValue($paramEmail);
        $stmt->bind_param('s',$arg1);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            return new Accounts($row['AccountID'],$row['FirstName'],$row['LastName'],$row['Email'],$row['Password'],$row['Bio'],$row['RoleID'],$row['ImgURL'],$row['DateOfBirth'],$row['Location'],$row['CreateDate']);
        }
        else {
            return 0;
        }
    }
}
