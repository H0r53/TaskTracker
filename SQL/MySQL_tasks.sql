/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			11/19/2017
Description:	Creates the tasks table and respective stored procedures

*/


USE tasktracker;



--------------------------------------------------------------
-- Create table
--------------------------------------------------------------



CREATE TABLE `tasktracker`.`tasks` (
TaskID INT AUTO_INCREMENT,
TaskName VARCHAR(255),
Description VARCHAR(1025),
AssigneeAccountID INT,
ReporterAccountID INT,
StatusTypeID INT,
TaskTypeID INT,
PriorityTypeID INT,
ProjectID INT,
CreateDate DATETIME,
CloseDate DATETIME,
ReopenDate DATETIME,
CONSTRAINT pk_tasks_TaskID PRIMARY KEY (TaskID)
,
CONSTRAINT fk_tasks_AssigneeAccountID_accounts_AccountID FOREIGN KEY (AssigneeAccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_tasks_ReporterAccountID_accounts_AccountID FOREIGN KEY (ReporterAccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_tasks_StatusTypeID_statustypes_StatusTypeID FOREIGN KEY (StatusTypeID) REFERENCES statustypes (StatusTypeID)
,
CONSTRAINT fk_tasks_TaskTypeID_tasktypes_TaskTypeID FOREIGN KEY (TaskTypeID) REFERENCES tasktypes (TaskTypeID)
,
CONSTRAINT fk_tasks_PriorityTypeID_prioritytypes_PriorityTypeID FOREIGN KEY (PriorityTypeID) REFERENCES prioritytypes (PriorityTypeID)
,
CONSTRAINT fk_tasks_ProjectID_projects_ProjectID FOREIGN KEY (ProjectID) REFERENCES projects (ProjectID)
);


--------------------------------------------------------------
-- Create default SCRUD sprocs for this table
--------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Load`
(
	 IN paramTaskID INT
)
BEGIN
	SELECT
		`tasks`.`TaskID` AS `TaskID`,
		`tasks`.`TaskName` AS `TaskName`,
		`tasks`.`Description` AS `Description`,
		`tasks`.`AssigneeAccountID` AS `AssigneeAccountID`,
		`tasks`.`ReporterAccountID` AS `ReporterAccountID`,
		`tasks`.`StatusTypeID` AS `StatusTypeID`,
		`tasks`.`TaskTypeID` AS `TaskTypeID`,
		`tasks`.`PriorityTypeID` AS `PriorityTypeID`,
		`tasks`.`ProjectID` AS `ProjectID`,
		`tasks`.`CreateDate` AS `CreateDate`,
		`tasks`.`CloseDate` AS `CloseDate`,
		`tasks`.`ReopenDate` AS `ReopenDate`
	FROM `tasks`
	WHERE 		`tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_LoadAll`()
BEGIN
	SELECT
		`tasks`.`TaskID` AS `TaskID`,
		`tasks`.`TaskName` AS `TaskName`,
		`tasks`.`Description` AS `Description`,
		`tasks`.`AssigneeAccountID` AS `AssigneeAccountID`,
		`tasks`.`ReporterAccountID` AS `ReporterAccountID`,
		`tasks`.`StatusTypeID` AS `StatusTypeID`,
		`tasks`.`TaskTypeID` AS `TaskTypeID`,
		`tasks`.`PriorityTypeID` AS `PriorityTypeID`,
		`tasks`.`ProjectID` AS `ProjectID`,
		`tasks`.`CreateDate` AS `CreateDate`,
		`tasks`.`CloseDate` AS `CloseDate`,
		`tasks`.`ReopenDate` AS `ReopenDate`
	FROM `tasks`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Add`
(
	 IN paramTaskName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramAssigneeAccountID INT,
	 IN paramReporterAccountID INT,
	 IN paramStatusTypeID INT,
	 IN paramTaskTypeID INT,
	 IN paramPriorityTypeID INT,
	 IN paramProjectID INT,
	 IN paramCreateDate DATETIME,
	 IN paramCloseDate DATETIME,
	 IN paramReopenDate DATETIME
)
BEGIN
	INSERT INTO `tasks` (TaskName,Description,AssigneeAccountID,ReporterAccountID,StatusTypeID,TaskTypeID,PriorityTypeID,ProjectID,CreateDate,CloseDate,ReopenDate)
	VALUES (paramTaskName, paramDescription, paramAssigneeAccountID, paramReporterAccountID, paramStatusTypeID, paramTaskTypeID, paramPriorityTypeID, paramProjectID, paramCreateDate, paramCloseDate, paramReopenDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Update`
(
	IN paramTaskID INT,
	IN paramTaskName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramAssigneeAccountID INT,
	IN paramReporterAccountID INT,
	IN paramStatusTypeID INT,
	IN paramTaskTypeID INT,
	IN paramPriorityTypeID INT,
	IN paramProjectID INT,
	IN paramCreateDate DATETIME,
	IN paramCloseDate DATETIME,
	IN paramReopenDate DATETIME
)
BEGIN
	UPDATE `tasks`
	SET TaskName = paramTaskName
		,Description = paramDescription
		,AssigneeAccountID = paramAssigneeAccountID
		,ReporterAccountID = paramReporterAccountID
		,StatusTypeID = paramStatusTypeID
		,TaskTypeID = paramTaskTypeID
		,PriorityTypeID = paramPriorityTypeID
		,ProjectID = paramProjectID
		,CreateDate = paramCreateDate
		,CloseDate = paramCloseDate
		,ReopenDate = paramReopenDate
	WHERE		`tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Delete`
(
	IN paramTaskID INT
)
BEGIN
	DELETE FROM `tasks`
	WHERE		`tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Search`
(
	IN paramTaskID INT,
	IN paramTaskName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramAssigneeAccountID INT,
	IN paramReporterAccountID INT,
	IN paramStatusTypeID INT,
	IN paramTaskTypeID INT,
	IN paramPriorityTypeID INT,
	IN paramProjectID INT,
	IN paramCreateDate DATETIME,
	IN paramCloseDate DATETIME,
	IN paramReopenDate DATETIME
)
BEGIN
	SELECT
		`tasks`.`TaskID` AS `TaskID`,
		`tasks`.`TaskName` AS `TaskName`,
		`tasks`.`Description` AS `Description`,
		`tasks`.`AssigneeAccountID` AS `AssigneeAccountID`,
		`tasks`.`ReporterAccountID` AS `ReporterAccountID`,
		`tasks`.`StatusTypeID` AS `StatusTypeID`,
		`tasks`.`TaskTypeID` AS `TaskTypeID`,
		`tasks`.`PriorityTypeID` AS `PriorityTypeID`,
		`tasks`.`ProjectID` AS `ProjectID`,
		`tasks`.`CreateDate` AS `CreateDate`,
		`tasks`.`CloseDate` AS `CloseDate`,
		`tasks`.`ReopenDate` AS `ReopenDate`
	FROM `tasks`
	WHERE
		COALESCE(tasks.`TaskID`,0) = COALESCE(paramTaskID,tasks.`TaskID`,0)
		AND COALESCE(tasks.`TaskName`,'') = COALESCE(paramTaskName,tasks.`TaskName`,'')
		AND COALESCE(tasks.`Description`,'') = COALESCE(paramDescription,tasks.`Description`,'')
		AND COALESCE(tasks.`AssigneeAccountID`,0) = COALESCE(paramAssigneeAccountID,tasks.`AssigneeAccountID`,0)
		AND COALESCE(tasks.`ReporterAccountID`,0) = COALESCE(paramReporterAccountID,tasks.`ReporterAccountID`,0)
		AND COALESCE(tasks.`StatusTypeID`,0) = COALESCE(paramStatusTypeID,tasks.`StatusTypeID`,0)
		AND COALESCE(tasks.`TaskTypeID`,0) = COALESCE(paramTaskTypeID,tasks.`TaskTypeID`,0)
		AND COALESCE(tasks.`PriorityTypeID`,0) = COALESCE(paramPriorityTypeID,tasks.`PriorityTypeID`,0)
		AND COALESCE(tasks.`ProjectID`,0) = COALESCE(paramProjectID,tasks.`ProjectID`,0)
		AND COALESCE(CAST(tasks.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(tasks.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(tasks.`CloseDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCloseDate AS DATE),CAST(tasks.`CloseDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(tasks.`ReopenDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramReopenDate AS DATE),CAST(tasks.`ReopenDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


