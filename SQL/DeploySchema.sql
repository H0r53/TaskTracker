/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the commentstatustypes table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`commentstatustypes` (
CommentStatusTypeID INT AUTO_INCREMENT,
CommentStatusType VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_commentstatustypes_CommentStatusTypeID PRIMARY KEY (CommentStatusTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_commentstatustypes_Load`
(
	 IN paramCommentStatusTypeID INT
)
BEGIN
	SELECT
		`commentstatustypes`.`CommentStatusTypeID` AS `CommentStatusTypeID`,
		`commentstatustypes`.`CommentStatusType` AS `CommentStatusType`,
		`commentstatustypes`.`Description` AS `Description`
	FROM `commentstatustypes`
	WHERE 		`commentstatustypes`.`CommentStatusTypeID` = paramCommentStatusTypeID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_commentstatustypes_LoadAll`()
BEGIN
	SELECT
		`commentstatustypes`.`CommentStatusTypeID` AS `CommentStatusTypeID`,
		`commentstatustypes`.`CommentStatusType` AS `CommentStatusType`,
		`commentstatustypes`.`Description` AS `Description`
	FROM `commentstatustypes`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_commentstatustypes_Add`
(
	 IN paramCommentStatusType VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `commentstatustypes` (CommentStatusType,Description)
	VALUES (paramCommentStatusType, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_commentstatustypes_Update`
(
	IN paramCommentStatusTypeID INT,
	IN paramCommentStatusType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `commentstatustypes`
	SET CommentStatusType = paramCommentStatusType
		,Description = paramDescription
	WHERE		`commentstatustypes`.`CommentStatusTypeID` = paramCommentStatusTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_commentstatustypes_Delete`
(
	IN paramCommentStatusTypeID INT
)
BEGIN
	DELETE FROM `commentstatustypes`
	WHERE		`commentstatustypes`.`CommentStatusTypeID` = paramCommentStatusTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_commentstatustypes_Search`
(
	IN paramCommentStatusTypeID INT,
	IN paramCommentStatusType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`commentstatustypes`.`CommentStatusTypeID` AS `CommentStatusTypeID`,
		`commentstatustypes`.`CommentStatusType` AS `CommentStatusType`,
		`commentstatustypes`.`Description` AS `Description`
	FROM `commentstatustypes`
	WHERE
		COALESCE(commentstatustypes.`CommentStatusTypeID`,0) = COALESCE(paramCommentStatusTypeID,commentstatustypes.`CommentStatusTypeID`,0)
		AND COALESCE(commentstatustypes.`CommentStatusType`,'') = COALESCE(paramCommentStatusType,commentstatustypes.`CommentStatusType`,'')
		AND COALESCE(commentstatustypes.`Description`,'') = COALESCE(paramDescription,commentstatustypes.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the notificationtypes table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`notificationtypes` (
NotificationTypeID INT AUTO_INCREMENT,
Notification VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_notificationtypes_NotificationTypeID PRIMARY KEY (NotificationTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notificationtypes_Load`
(
	 IN paramNotificationTypeID INT
)
BEGIN
	SELECT
		`notificationtypes`.`NotificationTypeID` AS `NotificationTypeID`,
		`notificationtypes`.`Notification` AS `Notification`,
		`notificationtypes`.`Description` AS `Description`
	FROM `notificationtypes`
	WHERE 		`notificationtypes`.`NotificationTypeID` = paramNotificationTypeID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notificationtypes_LoadAll`()
BEGIN
	SELECT
		`notificationtypes`.`NotificationTypeID` AS `NotificationTypeID`,
		`notificationtypes`.`Notification` AS `Notification`,
		`notificationtypes`.`Description` AS `Description`
	FROM `notificationtypes`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notificationtypes_Add`
(
	 IN paramNotification VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `notificationtypes` (Notification,Description)
	VALUES (paramNotification, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notificationtypes_Update`
(
	IN paramNotificationTypeID INT,
	IN paramNotification VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `notificationtypes`
	SET Notification = paramNotification
		,Description = paramDescription
	WHERE		`notificationtypes`.`NotificationTypeID` = paramNotificationTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notificationtypes_Delete`
(
	IN paramNotificationTypeID INT
)
BEGIN
	DELETE FROM `notificationtypes`
	WHERE		`notificationtypes`.`NotificationTypeID` = paramNotificationTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notificationtypes_Search`
(
	IN paramNotificationTypeID INT,
	IN paramNotification VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`notificationtypes`.`NotificationTypeID` AS `NotificationTypeID`,
		`notificationtypes`.`Notification` AS `Notification`,
		`notificationtypes`.`Description` AS `Description`
	FROM `notificationtypes`
	WHERE
		COALESCE(notificationtypes.`NotificationTypeID`,0) = COALESCE(paramNotificationTypeID,notificationtypes.`NotificationTypeID`,0)
		AND COALESCE(notificationtypes.`Notification`,'') = COALESCE(paramNotification,notificationtypes.`Notification`,'')
		AND COALESCE(notificationtypes.`Description`,'') = COALESCE(paramDescription,notificationtypes.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the permissions table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`permissions` (
PermissionID INT AUTO_INCREMENT,
PermissionName VARCHAR(255),
Description VARCHAR(1025),
CreateDate DATETIME,
CONSTRAINT pk_permissions_PermissionID PRIMARY KEY (PermissionID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_permissions_Load`
(
	 IN paramPermissionID INT
)
BEGIN
	SELECT
		`permissions`.`PermissionID` AS `PermissionID`,
		`permissions`.`PermissionName` AS `PermissionName`,
		`permissions`.`Description` AS `Description`,
		`permissions`.`CreateDate` AS `CreateDate`
	FROM `permissions`
	WHERE 		`permissions`.`PermissionID` = paramPermissionID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_permissions_LoadAll`()
BEGIN
	SELECT
		`permissions`.`PermissionID` AS `PermissionID`,
		`permissions`.`PermissionName` AS `PermissionName`,
		`permissions`.`Description` AS `Description`,
		`permissions`.`CreateDate` AS `CreateDate`
	FROM `permissions`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_permissions_Add`
(
	 IN paramPermissionName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `permissions` (PermissionName,Description,CreateDate)
	VALUES (paramPermissionName, paramDescription, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_permissions_Update`
(
	IN paramPermissionID INT,
	IN paramPermissionName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `permissions`
	SET PermissionName = paramPermissionName
		,Description = paramDescription
		,CreateDate = paramCreateDate
	WHERE		`permissions`.`PermissionID` = paramPermissionID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_permissions_Delete`
(
	IN paramPermissionID INT
)
BEGIN
	DELETE FROM `permissions`
	WHERE		`permissions`.`PermissionID` = paramPermissionID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_permissions_Search`
(
	IN paramPermissionID INT,
	IN paramPermissionName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`permissions`.`PermissionID` AS `PermissionID`,
		`permissions`.`PermissionName` AS `PermissionName`,
		`permissions`.`Description` AS `Description`,
		`permissions`.`CreateDate` AS `CreateDate`
	FROM `permissions`
	WHERE
		COALESCE(permissions.`PermissionID`,0) = COALESCE(paramPermissionID,permissions.`PermissionID`,0)
		AND COALESCE(permissions.`PermissionName`,'') = COALESCE(paramPermissionName,permissions.`PermissionName`,'')
		AND COALESCE(permissions.`Description`,'') = COALESCE(paramDescription,permissions.`Description`,'')
		AND COALESCE(CAST(permissions.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(permissions.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the projectcategorytypes table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`projectcategorytypes` (
ProjectCategoryTypeID INT AUTO_INCREMENT,
ProjectCategoryType VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_projectcategorytypes_ProjectCategoryTypeID PRIMARY KEY (ProjectCategoryTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projectcategorytypes_Load`
(
	 IN paramProjectCategoryTypeID INT
)
BEGIN
	SELECT
		`projectcategorytypes`.`ProjectCategoryTypeID` AS `ProjectCategoryTypeID`,
		`projectcategorytypes`.`ProjectCategoryType` AS `ProjectCategoryType`,
		`projectcategorytypes`.`Description` AS `Description`
	FROM `projectcategorytypes`
	WHERE 		`projectcategorytypes`.`ProjectCategoryTypeID` = paramProjectCategoryTypeID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projectcategorytypes_LoadAll`()
BEGIN
	SELECT
		`projectcategorytypes`.`ProjectCategoryTypeID` AS `ProjectCategoryTypeID`,
		`projectcategorytypes`.`ProjectCategoryType` AS `ProjectCategoryType`,
		`projectcategorytypes`.`Description` AS `Description`
	FROM `projectcategorytypes`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projectcategorytypes_Add`
(
	 IN paramProjectCategoryType VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `projectcategorytypes` (ProjectCategoryType,Description)
	VALUES (paramProjectCategoryType, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projectcategorytypes_Update`
(
	IN paramProjectCategoryTypeID INT,
	IN paramProjectCategoryType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `projectcategorytypes`
	SET ProjectCategoryType = paramProjectCategoryType
		,Description = paramDescription
	WHERE		`projectcategorytypes`.`ProjectCategoryTypeID` = paramProjectCategoryTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projectcategorytypes_Delete`
(
	IN paramProjectCategoryTypeID INT
)
BEGIN
	DELETE FROM `projectcategorytypes`
	WHERE		`projectcategorytypes`.`ProjectCategoryTypeID` = paramProjectCategoryTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projectcategorytypes_Search`
(
	IN paramProjectCategoryTypeID INT,
	IN paramProjectCategoryType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`projectcategorytypes`.`ProjectCategoryTypeID` AS `ProjectCategoryTypeID`,
		`projectcategorytypes`.`ProjectCategoryType` AS `ProjectCategoryType`,
		`projectcategorytypes`.`Description` AS `Description`
	FROM `projectcategorytypes`
	WHERE
		COALESCE(projectcategorytypes.`ProjectCategoryTypeID`,0) = COALESCE(paramProjectCategoryTypeID,projectcategorytypes.`ProjectCategoryTypeID`,0)
		AND COALESCE(projectcategorytypes.`ProjectCategoryType`,'') = COALESCE(paramProjectCategoryType,projectcategorytypes.`ProjectCategoryType`,'')
		AND COALESCE(projectcategorytypes.`Description`,'') = COALESCE(paramDescription,projectcategorytypes.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the roles table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`roles` (
RoleID INT AUTO_INCREMENT,
Role VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_roles_RoleID PRIMARY KEY (RoleID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_roles_Load`
(
	 IN paramRoleID INT
)
BEGIN
	SELECT
		`roles`.`RoleID` AS `RoleID`,
		`roles`.`Role` AS `Role`,
		`roles`.`Description` AS `Description`
	FROM `roles`
	WHERE 		`roles`.`RoleID` = paramRoleID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_roles_LoadAll`()
BEGIN
	SELECT
		`roles`.`RoleID` AS `RoleID`,
		`roles`.`Role` AS `Role`,
		`roles`.`Description` AS `Description`
	FROM `roles`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_roles_Add`
(
	 IN paramRole VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `roles` (Role,Description)
	VALUES (paramRole, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_roles_Update`
(
	IN paramRoleID INT,
	IN paramRole VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `roles`
	SET Role = paramRole
		,Description = paramDescription
	WHERE		`roles`.`RoleID` = paramRoleID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_roles_Delete`
(
	IN paramRoleID INT
)
BEGIN
	DELETE FROM `roles`
	WHERE		`roles`.`RoleID` = paramRoleID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_roles_Search`
(
	IN paramRoleID INT,
	IN paramRole VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`roles`.`RoleID` AS `RoleID`,
		`roles`.`Role` AS `Role`,
		`roles`.`Description` AS `Description`
	FROM `roles`
	WHERE
		COALESCE(roles.`RoleID`,0) = COALESCE(paramRoleID,roles.`RoleID`,0)
		AND COALESCE(roles.`Role`,'') = COALESCE(paramRole,roles.`Role`,'')
		AND COALESCE(roles.`Description`,'') = COALESCE(paramDescription,roles.`Description`,'');
END //
DELIMITER ;



/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the statustypes table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`statustypes` (
StatusTypeID INT AUTO_INCREMENT,
Status VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_statustypes_StatusTypeID PRIMARY KEY (StatusTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_statustypes_Load`
(
	 IN paramStatusTypeID INT
)
BEGIN
	SELECT
		`statustypes`.`StatusTypeID` AS `StatusTypeID`,
		`statustypes`.`Status` AS `Status`,
		`statustypes`.`Description` AS `Description`
	FROM `statustypes`
	WHERE 		`statustypes`.`StatusTypeID` = paramStatusTypeID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_statustypes_LoadAll`()
BEGIN
	SELECT
		`statustypes`.`StatusTypeID` AS `StatusTypeID`,
		`statustypes`.`Status` AS `Status`,
		`statustypes`.`Description` AS `Description`
	FROM `statustypes`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_statustypes_Add`
(
	 IN paramStatus VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `statustypes` (Status,Description)
	VALUES (paramStatus, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_statustypes_Update`
(
	IN paramStatusTypeID INT,
	IN paramStatus VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `statustypes`
	SET Status = paramStatus
		,Description = paramDescription
	WHERE		`statustypes`.`StatusTypeID` = paramStatusTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_statustypes_Delete`
(
	IN paramStatusTypeID INT
)
BEGIN
	DELETE FROM `statustypes`
	WHERE		`statustypes`.`StatusTypeID` = paramStatusTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_statustypes_Search`
(
	IN paramStatusTypeID INT,
	IN paramStatus VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`statustypes`.`StatusTypeID` AS `StatusTypeID`,
		`statustypes`.`Status` AS `Status`,
		`statustypes`.`Description` AS `Description`
	FROM `statustypes`
	WHERE
		COALESCE(statustypes.`StatusTypeID`,0) = COALESCE(paramStatusTypeID,statustypes.`StatusTypeID`,0)
		AND COALESCE(statustypes.`Status`,'') = COALESCE(paramStatus,statustypes.`Status`,'')
		AND COALESCE(statustypes.`Description`,'') = COALESCE(paramDescription,statustypes.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the rolestopermissions table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`rolestopermissions` (
RoleToPermissionID INT AUTO_INCREMENT,
RoleID INT,
PermissionID INT,
CONSTRAINT pk_rolestopermissions_RoleToPermissionID PRIMARY KEY (RoleToPermissionID)
,
CONSTRAINT fk_rolestopermissions_RoleID_roles_RoleID FOREIGN KEY (RoleID) REFERENCES roles (RoleID)
,
CONSTRAINT fk_rolestopermissions_PermissionID_permissions_PermissionID FOREIGN KEY (PermissionID) REFERENCES permissions (PermissionID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_rolestopermissions_Load`
(
	 IN paramRoleToPermissionID INT
)
BEGIN
	SELECT
		`rolestopermissions`.`RoleToPermissionID` AS `RoleToPermissionID`,
		`rolestopermissions`.`RoleID` AS `RoleID`,
		`rolestopermissions`.`PermissionID` AS `PermissionID`
	FROM `rolestopermissions`
	WHERE 		`rolestopermissions`.`RoleToPermissionID` = paramRoleToPermissionID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_rolestopermissions_LoadAll`()
BEGIN
	SELECT
		`rolestopermissions`.`RoleToPermissionID` AS `RoleToPermissionID`,
		`rolestopermissions`.`RoleID` AS `RoleID`,
		`rolestopermissions`.`PermissionID` AS `PermissionID`
	FROM `rolestopermissions`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_rolestopermissions_Add`
(
	 IN paramRoleID INT,
	 IN paramPermissionID INT
)
BEGIN
	INSERT INTO `rolestopermissions` (RoleID,PermissionID)
	VALUES (paramRoleID, paramPermissionID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_rolestopermissions_Update`
(
	IN paramRoleToPermissionID INT,
	IN paramRoleID INT,
	IN paramPermissionID INT
)
BEGIN
	UPDATE `rolestopermissions`
	SET RoleID = paramRoleID
		,PermissionID = paramPermissionID
	WHERE		`rolestopermissions`.`RoleToPermissionID` = paramRoleToPermissionID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_rolestopermissions_Delete`
(
	IN paramRoleToPermissionID INT
)
BEGIN
	DELETE FROM `rolestopermissions`
	WHERE		`rolestopermissions`.`RoleToPermissionID` = paramRoleToPermissionID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_rolestopermissions_Search`
(
	IN paramRoleToPermissionID INT,
	IN paramRoleID INT,
	IN paramPermissionID INT
)
BEGIN
	SELECT
		`rolestopermissions`.`RoleToPermissionID` AS `RoleToPermissionID`,
		`rolestopermissions`.`RoleID` AS `RoleID`,
		`rolestopermissions`.`PermissionID` AS `PermissionID`
	FROM `rolestopermissions`
	WHERE
		COALESCE(rolestopermissions.`RoleToPermissionID`,0) = COALESCE(paramRoleToPermissionID,rolestopermissions.`RoleToPermissionID`,0)
		AND COALESCE(rolestopermissions.`RoleID`,0) = COALESCE(paramRoleID,rolestopermissions.`RoleID`,0)
		AND COALESCE(rolestopermissions.`PermissionID`,0) = COALESCE(paramPermissionID,rolestopermissions.`PermissionID`,0);
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the tasktypes table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`tasktypes` (
TaskTypeID INT AUTO_INCREMENT,
TaskType VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_tasktypes_TaskTypeID PRIMARY KEY (TaskTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasktypes_Load`
(
	 IN paramTaskTypeID INT
)
BEGIN
	SELECT
		`tasktypes`.`TaskTypeID` AS `TaskTypeID`,
		`tasktypes`.`TaskType` AS `TaskType`,
		`tasktypes`.`Description` AS `Description`
	FROM `tasktypes`
	WHERE 		`tasktypes`.`TaskTypeID` = paramTaskTypeID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasktypes_LoadAll`()
BEGIN
	SELECT
		`tasktypes`.`TaskTypeID` AS `TaskTypeID`,
		`tasktypes`.`TaskType` AS `TaskType`,
		`tasktypes`.`Description` AS `Description`
	FROM `tasktypes`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasktypes_Add`
(
	 IN paramTaskType VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `tasktypes` (TaskType,Description)
	VALUES (paramTaskType, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasktypes_Update`
(
	IN paramTaskTypeID INT,
	IN paramTaskType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `tasktypes`
	SET TaskType = paramTaskType
		,Description = paramDescription
	WHERE		`tasktypes`.`TaskTypeID` = paramTaskTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasktypes_Delete`
(
	IN paramTaskTypeID INT
)
BEGIN
	DELETE FROM `tasktypes`
	WHERE		`tasktypes`.`TaskTypeID` = paramTaskTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasktypes_Search`
(
	IN paramTaskTypeID INT,
	IN paramTaskType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`tasktypes`.`TaskTypeID` AS `TaskTypeID`,
		`tasktypes`.`TaskType` AS `TaskType`,
		`tasktypes`.`Description` AS `Description`
	FROM `tasktypes`
	WHERE
		COALESCE(tasktypes.`TaskTypeID`,0) = COALESCE(paramTaskTypeID,tasktypes.`TaskTypeID`,0)
		AND COALESCE(tasktypes.`TaskType`,'') = COALESCE(paramTaskType,tasktypes.`TaskType`,'')
		AND COALESCE(tasktypes.`Description`,'') = COALESCE(paramDescription,tasktypes.`Description`,'');
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the teams table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`teams` (
TeamID INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_teams_TeamID PRIMARY KEY (TeamID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teams_Load`
(
	 IN paramTeamID INT
)
BEGIN
	SELECT
		`teams`.`TeamID` AS `TeamID`,
		`teams`.`Name` AS `Name`,
		`teams`.`Description` AS `Description`
	FROM `teams`
	WHERE 		`teams`.`TeamID` = paramTeamID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teams_LoadAll`()
BEGIN
	SELECT
		`teams`.`TeamID` AS `TeamID`,
		`teams`.`Name` AS `Name`,
		`teams`.`Description` AS `Description`
	FROM `teams`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teams_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `teams` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teams_Update`
(
	IN paramTeamID INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `teams`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`teams`.`TeamID` = paramTeamID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teams_Delete`
(
	IN paramTeamID INT
)
BEGIN
	DELETE FROM `teams`
	WHERE		`teams`.`TeamID` = paramTeamID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teams_Search`
(
	IN paramTeamID INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`teams`.`TeamID` AS `TeamID`,
		`teams`.`Name` AS `Name`,
		`teams`.`Description` AS `Description`
	FROM `teams`
	WHERE
		COALESCE(teams.`TeamID`,0) = COALESCE(paramTeamID,teams.`TeamID`,0)
		AND COALESCE(teams.`Name`,'') = COALESCE(paramName,teams.`Name`,'')
		AND COALESCE(teams.`Description`,'') = COALESCE(paramDescription,teams.`Description`,'');
END //
DELIMITER ;





/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the accounts table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`accounts` (
AccountID INT AUTO_INCREMENT,
FirstName VARCHAR(255),
LastName VARCHAR(255),
Email VARCHAR(255),
Password VARCHAR(255),
Bio VARCHAR(1025),
RoleID INT,
ImgURL VARCHAR(1025),
DateOfBirth DATE,
Location VARCHAR(255),
CreateDate DATETIME,
CONSTRAINT pk_accounts_AccountID PRIMARY KEY (AccountID)
,
CONSTRAINT fk_accounts_RoleID_roles_RoleID FOREIGN KEY (RoleID) REFERENCES roles (RoleID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_accounts_Load`
(
	 IN paramAccountID INT
)
BEGIN
	SELECT
		`accounts`.`AccountID` AS `AccountID`,
		`accounts`.`FirstName` AS `FirstName`,
		`accounts`.`LastName` AS `LastName`,
		`accounts`.`Email` AS `Email`,
		`accounts`.`Password` AS `Password`,
		`accounts`.`Bio` AS `Bio`,
		`accounts`.`RoleID` AS `RoleID`,
		`accounts`.`ImgURL` AS `ImgURL`,
		`accounts`.`DateOfBirth` AS `DateOfBirth`,
		`accounts`.`Location` AS `Location`,
		`accounts`.`CreateDate` AS `CreateDate`
	FROM `accounts`
	WHERE 		`accounts`.`AccountID` = paramAccountID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_accounts_LoadAll`()
BEGIN
	SELECT
		`accounts`.`AccountID` AS `AccountID`,
		`accounts`.`FirstName` AS `FirstName`,
		`accounts`.`LastName` AS `LastName`,
		`accounts`.`Email` AS `Email`,
		`accounts`.`Password` AS `Password`,
		`accounts`.`Bio` AS `Bio`,
		`accounts`.`RoleID` AS `RoleID`,
		`accounts`.`ImgURL` AS `ImgURL`,
		`accounts`.`DateOfBirth` AS `DateOfBirth`,
		`accounts`.`Location` AS `Location`,
		`accounts`.`CreateDate` AS `CreateDate`
	FROM `accounts`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_accounts_Add`
(
	 IN paramFirstName VARCHAR(255),
	 IN paramLastName VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramBio VARCHAR(1025),
	 IN paramRoleID INT,
	 IN paramImgURL VARCHAR(1025),
	 IN paramDateOfBirth DATE,
	 IN paramLocation VARCHAR(255),
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `accounts` (FirstName,LastName,Email,Password,Bio,RoleID,ImgURL,DateOfBirth,Location,CreateDate)
	VALUES (paramFirstName, paramLastName, paramEmail, paramPassword, paramBio, paramRoleID, paramImgURL, paramDateOfBirth, paramLocation, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_accounts_Update`
(
	IN paramAccountID INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramBio VARCHAR(1025),
	IN paramRoleID INT,
	IN paramImgURL VARCHAR(1025),
	IN paramDateOfBirth DATE,
	IN paramLocation VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `accounts`
	SET FirstName = paramFirstName
		,LastName = paramLastName
		,Email = paramEmail
		,Password = paramPassword
		,Bio = paramBio
		,RoleID = paramRoleID
		,ImgURL = paramImgURL
		,DateOfBirth = paramDateOfBirth
		,Location = paramLocation
		,CreateDate = paramCreateDate
	WHERE		`accounts`.`AccountID` = paramAccountID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_accounts_Delete`
(
	IN paramAccountID INT
)
BEGIN
	DELETE FROM `accounts`
	WHERE		`accounts`.`AccountID` = paramAccountID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_accounts_Search`
(
	IN paramAccountID INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramBio VARCHAR(1025),
	IN paramRoleID INT,
	IN paramImgURL VARCHAR(1025),
	IN paramDateOfBirth DATE,
	IN paramLocation VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`accounts`.`AccountID` AS `AccountID`,
		`accounts`.`FirstName` AS `FirstName`,
		`accounts`.`LastName` AS `LastName`,
		`accounts`.`Email` AS `Email`,
		`accounts`.`Password` AS `Password`,
		`accounts`.`Bio` AS `Bio`,
		`accounts`.`RoleID` AS `RoleID`,
		`accounts`.`ImgURL` AS `ImgURL`,
		`accounts`.`DateOfBirth` AS `DateOfBirth`,
		`accounts`.`Location` AS `Location`,
		`accounts`.`CreateDate` AS `CreateDate`
	FROM `accounts`
	WHERE
		COALESCE(accounts.`AccountID`,0) = COALESCE(paramAccountID,accounts.`AccountID`,0)
		AND COALESCE(accounts.`FirstName`,'') = COALESCE(paramFirstName,accounts.`FirstName`,'')
		AND COALESCE(accounts.`LastName`,'') = COALESCE(paramLastName,accounts.`LastName`,'')
		AND COALESCE(accounts.`Email`,'') = COALESCE(paramEmail,accounts.`Email`,'')
		AND COALESCE(accounts.`Password`,'') = COALESCE(paramPassword,accounts.`Password`,'')
		AND COALESCE(accounts.`Bio`,'') = COALESCE(paramBio,accounts.`Bio`,'')
		AND COALESCE(accounts.`RoleID`,0) = COALESCE(paramRoleID,accounts.`RoleID`,0)
		AND COALESCE(accounts.`ImgURL`,'') = COALESCE(paramImgURL,accounts.`ImgURL`,'')
		AND COALESCE(accounts.`DateOfBirth`,'') = COALESCE(paramDateOfBirth,accounts.`DateOfBirth`,'')
		AND COALESCE(accounts.`Location`,'') = COALESCE(paramLocation,accounts.`Location`,'')
		AND COALESCE(CAST(accounts.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(accounts.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the messages table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`messages` (
MessageID INT AUTO_INCREMENT,
Description VARCHAR(255),
SenderAccountID INT,
RecipientAccountID INT,
SentDate DATETIME,
Seen INT,
CONSTRAINT pk_messages_MessageID PRIMARY KEY (MessageID)
,
CONSTRAINT fk_messages_SenderAccountID_accounts_AccountID FOREIGN KEY (SenderAccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_messages_RecipientAccountID_accounts_AccountID FOREIGN KEY (RecipientAccountID) REFERENCES accounts (AccountID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_messages_Load`
(
	 IN paramMessageID INT
)
BEGIN
	SELECT
		`messages`.`MessageID` AS `MessageID`,
		`messages`.`Description` AS `Description`,
		`messages`.`SenderAccountID` AS `SenderAccountID`,
		`messages`.`RecipientAccountID` AS `RecipientAccountID`,
		`messages`.`SentDate` AS `SentDate`,
		`messages`.`Seen` AS `Seen`
	FROM `messages`
	WHERE 		`messages`.`MessageID` = paramMessageID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_messages_LoadAll`()
BEGIN
	SELECT
		`messages`.`MessageID` AS `MessageID`,
		`messages`.`Description` AS `Description`,
		`messages`.`SenderAccountID` AS `SenderAccountID`,
		`messages`.`RecipientAccountID` AS `RecipientAccountID`,
		`messages`.`SentDate` AS `SentDate`,
		`messages`.`Seen` AS `Seen`
	FROM `messages`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_messages_Add`
(
	 IN paramDescription VARCHAR(255),
	 IN paramSenderAccountID INT,
	 IN paramRecipientAccountID INT,
	 IN paramSentDate DATETIME,
	 IN paramSeen INT
)
BEGIN
	INSERT INTO `messages` (Description,SenderAccountID,RecipientAccountID,SentDate,Seen)
	VALUES (paramDescription, paramSenderAccountID, paramRecipientAccountID, paramSentDate, paramSeen);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_messages_Update`
(
	IN paramMessageID INT,
	IN paramDescription VARCHAR(255),
	IN paramSenderAccountID INT,
	IN paramRecipientAccountID INT,
	IN paramSentDate DATETIME,
	IN paramSeen INT
)
BEGIN
	UPDATE `messages`
	SET Description = paramDescription
		,SenderAccountID = paramSenderAccountID
		,RecipientAccountID = paramRecipientAccountID
		,SentDate = paramSentDate
		,Seen = paramSeen
	WHERE		`messages`.`MessageID` = paramMessageID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_messages_Delete`
(
	IN paramMessageID INT
)
BEGIN
	DELETE FROM `messages`
	WHERE		`messages`.`MessageID` = paramMessageID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_messages_Search`
(
	IN paramMessageID INT,
	IN paramDescription VARCHAR(255),
	IN paramSenderAccountID INT,
	IN paramRecipientAccountID INT,
	IN paramSentDate DATETIME,
	IN paramSeen INT
)
BEGIN
	SELECT
		`messages`.`MessageID` AS `MessageID`,
		`messages`.`Description` AS `Description`,
		`messages`.`SenderAccountID` AS `SenderAccountID`,
		`messages`.`RecipientAccountID` AS `RecipientAccountID`,
		`messages`.`SentDate` AS `SentDate`,
		`messages`.`Seen` AS `Seen`
	FROM `messages`
	WHERE
		COALESCE(messages.`MessageID`,0) = COALESCE(paramMessageID,messages.`MessageID`,0)
		AND COALESCE(messages.`Description`,'') = COALESCE(paramDescription,messages.`Description`,'')
		AND COALESCE(messages.`SenderAccountID`,0) = COALESCE(paramSenderAccountID,messages.`SenderAccountID`,0)
		AND COALESCE(messages.`RecipientAccountID`,0) = COALESCE(paramRecipientAccountID,messages.`RecipientAccountID`,0)
		AND COALESCE(CAST(messages.`SentDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramSentDate AS DATE),CAST(messages.`SentDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(messages.`Seen`,0) = COALESCE(paramSeen,messages.`Seen`,0);
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the projects table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`projects` (
ProjectID INT AUTO_INCREMENT,
ProjectName VARCHAR(255),
ProjectDescription VARCHAR(1025),
ImgURL VARCHAR(1025),
ProjectURL VARCHAR(1025),
ProjectLeadAccountID INT,
ProjectCategoryID INT,
CONSTRAINT pk_projects_ProjectID PRIMARY KEY (ProjectID)
,
CONSTRAINT fk_projects_ProjectLeadAccountID_accounts_AccountID FOREIGN KEY (ProjectLeadAccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_projects_ProjectCategoryID_projcattypes_ProjectCategoryTypeID FOREIGN KEY (ProjectCategoryID) REFERENCES projectcategorytypes (ProjectCategoryTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projects_Load`
(
	 IN paramProjectID INT
)
BEGIN
	SELECT
		`projects`.`ProjectID` AS `ProjectID`,
		`projects`.`ProjectName` AS `ProjectName`,
		`projects`.`ProjectDescription` AS `ProjectDescription`,
		`projects`.`ImgURL` AS `ImgURL`,
		`projects`.`ProjectURL` AS `ProjectURL`,
		`projects`.`ProjectLeadAccountID` AS `ProjectLeadAccountID`,
		`projects`.`ProjectCategoryID` AS `ProjectCategoryID`
	FROM `projects`
	WHERE 		`projects`.`ProjectID` = paramProjectID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projects_LoadAll`()
BEGIN
	SELECT
		`projects`.`ProjectID` AS `ProjectID`,
		`projects`.`ProjectName` AS `ProjectName`,
		`projects`.`ProjectDescription` AS `ProjectDescription`,
		`projects`.`ImgURL` AS `ImgURL`,
		`projects`.`ProjectURL` AS `ProjectURL`,
		`projects`.`ProjectLeadAccountID` AS `ProjectLeadAccountID`,
		`projects`.`ProjectCategoryID` AS `ProjectCategoryID`
	FROM `projects`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projects_Add`
(
	 IN paramProjectName VARCHAR(255),
	 IN paramProjectDescription VARCHAR(1025),
	 IN paramImgURL VARCHAR(1025),
	 IN paramProjectURL VARCHAR(1025),
	 IN paramProjectLeadAccountID INT,
	 IN paramProjectCategoryID INT
)
BEGIN
	INSERT INTO `projects` (ProjectName,ProjectDescription,ImgURL,ProjectURL,ProjectLeadAccountID,ProjectCategoryID)
	VALUES (paramProjectName, paramProjectDescription, paramImgURL, paramProjectURL, paramProjectLeadAccountID, paramProjectCategoryID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projects_Update`
(
	IN paramProjectID INT,
	IN paramProjectName VARCHAR(255),
	IN paramProjectDescription VARCHAR(1025),
	IN paramImgURL VARCHAR(1025),
	IN paramProjectURL VARCHAR(1025),
	IN paramProjectLeadAccountID INT,
	IN paramProjectCategoryID INT
)
BEGIN
	UPDATE `projects`
	SET ProjectName = paramProjectName
		,ProjectDescription = paramProjectDescription
		,ImgURL = paramImgURL
		,ProjectURL = paramProjectURL
		,ProjectLeadAccountID = paramProjectLeadAccountID
		,ProjectCategoryID = paramProjectCategoryID
	WHERE		`projects`.`ProjectID` = paramProjectID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projects_Delete`
(
	IN paramProjectID INT
)
BEGIN
	DELETE FROM `projects`
	WHERE		`projects`.`ProjectID` = paramProjectID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_projects_Search`
(
	IN paramProjectID INT,
	IN paramProjectName VARCHAR(255),
	IN paramProjectDescription VARCHAR(1025),
	IN paramImgURL VARCHAR(1025),
	IN paramProjectURL VARCHAR(1025),
	IN paramProjectLeadAccountID INT,
	IN paramProjectCategoryID INT
)
BEGIN
	SELECT
		`projects`.`ProjectID` AS `ProjectID`,
		`projects`.`ProjectName` AS `ProjectName`,
		`projects`.`ProjectDescription` AS `ProjectDescription`,
		`projects`.`ImgURL` AS `ImgURL`,
		`projects`.`ProjectURL` AS `ProjectURL`,
		`projects`.`ProjectLeadAccountID` AS `ProjectLeadAccountID`,
		`projects`.`ProjectCategoryID` AS `ProjectCategoryID`
	FROM `projects`
	WHERE
		COALESCE(projects.`ProjectID`,0) = COALESCE(paramProjectID,projects.`ProjectID`,0)
		AND COALESCE(projects.`ProjectName`,'') = COALESCE(paramProjectName,projects.`ProjectName`,'')
		AND COALESCE(projects.`ProjectDescription`,'') = COALESCE(paramProjectDescription,projects.`ProjectDescription`,'')
		AND COALESCE(projects.`ImgURL`,'') = COALESCE(paramImgURL,projects.`ImgURL`,'')
		AND COALESCE(projects.`ProjectURL`,'') = COALESCE(paramProjectURL,projects.`ProjectURL`,'')
		AND COALESCE(projects.`ProjectLeadAccountID`,0) = COALESCE(paramProjectLeadAccountID,projects.`ProjectLeadAccountID`,0)
		AND COALESCE(projects.`ProjectCategoryID`,0) = COALESCE(paramProjectCategoryID,projects.`ProjectCategoryID`,0);
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the prioritytypes table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`prioritytypes` (
PriorityTypeID INT AUTO_INCREMENT,
PriorityType VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_prioritytypes_PriorityTypeID PRIMARY KEY (PriorityTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_prioritytypes_Load`
(
	 IN paramPriorityTypeID INT
)
BEGIN
	SELECT
		`prioritytypes`.`PriorityTypeID` AS `PriorityTypeID`,
		`prioritytypes`.`PriorityType` AS `PriorityType`,
		`prioritytypes`.`Description` AS `Description`
	FROM `prioritytypes`
	WHERE 		`prioritytypes`.`PriorityTypeID` = paramPriorityTypeID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_prioritytypes_LoadAll`()
BEGIN
	SELECT
		`prioritytypes`.`PriorityTypeID` AS `PriorityTypeID`,
		`prioritytypes`.`PriorityType` AS `PriorityType`,
		`prioritytypes`.`Description` AS `Description`
	FROM `prioritytypes`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_prioritytypes_Add`
(
	 IN paramPriorityType VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `prioritytypes` (PriorityType,Description)
	VALUES (paramPriorityType, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_prioritytypes_Update`
(
	IN paramPriorityTypeID INT,
	IN paramPriorityType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `prioritytypes`
	SET PriorityType = paramPriorityType
		,Description = paramDescription
	WHERE		`prioritytypes`.`PriorityTypeID` = paramPriorityTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_prioritytypes_Delete`
(
	IN paramPriorityTypeID INT
)
BEGIN
	DELETE FROM `prioritytypes`
	WHERE		`prioritytypes`.`PriorityTypeID` = paramPriorityTypeID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_prioritytypes_Search`
(
	IN paramPriorityTypeID INT,
	IN paramPriorityType VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`prioritytypes`.`PriorityTypeID` AS `PriorityTypeID`,
		`prioritytypes`.`PriorityType` AS `PriorityType`,
		`prioritytypes`.`Description` AS `Description`
	FROM `prioritytypes`
	WHERE
		COALESCE(prioritytypes.`PriorityTypeID`,0) = COALESCE(paramPriorityTypeID,prioritytypes.`PriorityTypeID`,0)
		AND COALESCE(prioritytypes.`PriorityType`,'') = COALESCE(paramPriorityType,prioritytypes.`PriorityType`,'')
		AND COALESCE(prioritytypes.`Description`,'') = COALESCE(paramDescription,prioritytypes.`Description`,'');
END //
DELIMITER ;







/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the tasks table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`tasks` (
TaskID INT AUTO_INCREMENT,
TaskName VARCHAR(255),
Description VARCHAR(1025),
AssigneeAccountID INT,
ReporterAccountID INT,
StatusTypeID INT,
TaskTypeID INT,
PriorityTypeID INT,
ProjectID INT,
CreateDate DATETIME,
CloseDate DATETIME,
ReopenDate DATETIME,
CONSTRAINT pk_tasks_TaskID PRIMARY KEY (TaskID)
,
CONSTRAINT fk_tasks_AssigneeAccountID_accounts_AccountID FOREIGN KEY (AssigneeAccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_tasks_ReporterAccountID_accounts_AccountID FOREIGN KEY (ReporterAccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_tasks_StatusTypeID_statustypes_StatusTypeID FOREIGN KEY (StatusTypeID) REFERENCES statustypes (StatusTypeID)
,
CONSTRAINT fk_tasks_TaskTypeID_tasktypes_TaskTypeID FOREIGN KEY (TaskTypeID) REFERENCES tasktypes (TaskTypeID)
,
CONSTRAINT fk_tasks_PriorityTypeID_prioritytypes_PriorityTypeID FOREIGN KEY (PriorityTypeID) REFERENCES prioritytypes (PriorityTypeID)
,
CONSTRAINT fk_tasks_ProjectID_projects_ProjectID FOREIGN KEY (ProjectID) REFERENCES projects (ProjectID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Load`
(
	 IN paramTaskID INT
)
BEGIN
	SELECT
		`tasks`.`TaskID` AS `TaskID`,
		`tasks`.`TaskName` AS `TaskName`,
		`tasks`.`Description` AS `Description`,
		`tasks`.`AssigneeAccountID` AS `AssigneeAccountID`,
		`tasks`.`ReporterAccountID` AS `ReporterAccountID`,
		`tasks`.`StatusTypeID` AS `StatusTypeID`,
		`tasks`.`TaskTypeID` AS `TaskTypeID`,
		`tasks`.`PriorityTypeID` AS `PriorityTypeID`,
		`tasks`.`ProjectID` AS `ProjectID`,
		`tasks`.`CreateDate` AS `CreateDate`,
		`tasks`.`CloseDate` AS `CloseDate`,
		`tasks`.`ReopenDate` AS `ReopenDate`
	FROM `tasks`
	WHERE 		`tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_LoadAll`()
BEGIN
	SELECT
		`tasks`.`TaskID` AS `TaskID`,
		`tasks`.`TaskName` AS `TaskName`,
		`tasks`.`Description` AS `Description`,
		`tasks`.`AssigneeAccountID` AS `AssigneeAccountID`,
		`tasks`.`ReporterAccountID` AS `ReporterAccountID`,
		`tasks`.`StatusTypeID` AS `StatusTypeID`,
		`tasks`.`TaskTypeID` AS `TaskTypeID`,
		`tasks`.`PriorityTypeID` AS `PriorityTypeID`,
		`tasks`.`ProjectID` AS `ProjectID`,
		`tasks`.`CreateDate` AS `CreateDate`,
		`tasks`.`CloseDate` AS `CloseDate`,
		`tasks`.`ReopenDate` AS `ReopenDate`
	FROM `tasks`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Add`
(
	 IN paramTaskName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramAssigneeAccountID INT,
	 IN paramReporterAccountID INT,
	 IN paramStatusTypeID INT,
	 IN paramTaskTypeID INT,
	 IN paramPriorityTypeID INT,
	 IN paramProjectID INT,
	 IN paramCreateDate DATETIME,
	 IN paramCloseDate DATETIME,
	 IN paramReopenDate DATETIME
)
BEGIN
	INSERT INTO `tasks` (TaskName,Description,AssigneeAccountID,ReporterAccountID,StatusTypeID,TaskTypeID,PriorityTypeID,ProjectID,CreateDate,CloseDate,ReopenDate)
	VALUES (paramTaskName, paramDescription, paramAssigneeAccountID, paramReporterAccountID, paramStatusTypeID, paramTaskTypeID, paramPriorityTypeID, paramProjectID, paramCreateDate, paramCloseDate, paramReopenDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Update`
(
	IN paramTaskID INT,
	IN paramTaskName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramAssigneeAccountID INT,
	IN paramReporterAccountID INT,
	IN paramStatusTypeID INT,
	IN paramTaskTypeID INT,
	IN paramPriorityTypeID INT,
	IN paramProjectID INT,
	IN paramCreateDate DATETIME,
	IN paramCloseDate DATETIME,
	IN paramReopenDate DATETIME
)
BEGIN
	UPDATE `tasks`
	SET TaskName = paramTaskName
		,Description = paramDescription
		,AssigneeAccountID = paramAssigneeAccountID
		,ReporterAccountID = paramReporterAccountID
		,StatusTypeID = paramStatusTypeID
		,TaskTypeID = paramTaskTypeID
		,PriorityTypeID = paramPriorityTypeID
		,ProjectID = paramProjectID
		,CreateDate = paramCreateDate
		,CloseDate = paramCloseDate
		,ReopenDate = paramReopenDate
	WHERE		`tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Delete`
(
	IN paramTaskID INT
)
BEGIN
	DELETE FROM `tasks`
	WHERE		`tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_tasks_Search`
(
	IN paramTaskID INT,
	IN paramTaskName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramAssigneeAccountID INT,
	IN paramReporterAccountID INT,
	IN paramStatusTypeID INT,
	IN paramTaskTypeID INT,
	IN paramPriorityTypeID INT,
	IN paramProjectID INT,
	IN paramCreateDate DATETIME,
	IN paramCloseDate DATETIME,
	IN paramReopenDate DATETIME
)
BEGIN
	SELECT
		`tasks`.`TaskID` AS `TaskID`,
		`tasks`.`TaskName` AS `TaskName`,
		`tasks`.`Description` AS `Description`,
		`tasks`.`AssigneeAccountID` AS `AssigneeAccountID`,
		`tasks`.`ReporterAccountID` AS `ReporterAccountID`,
		`tasks`.`StatusTypeID` AS `StatusTypeID`,
		`tasks`.`TaskTypeID` AS `TaskTypeID`,
		`tasks`.`PriorityTypeID` AS `PriorityTypeID`,
		`tasks`.`ProjectID` AS `ProjectID`,
		`tasks`.`CreateDate` AS `CreateDate`,
		`tasks`.`CloseDate` AS `CloseDate`,
		`tasks`.`ReopenDate` AS `ReopenDate`
	FROM `tasks`
	WHERE
		COALESCE(tasks.`TaskID`,0) = COALESCE(paramTaskID,tasks.`TaskID`,0)
		AND COALESCE(tasks.`TaskName`,'') = COALESCE(paramTaskName,tasks.`TaskName`,'')
		AND COALESCE(tasks.`Description`,'') = COALESCE(paramDescription,tasks.`Description`,'')
		AND COALESCE(tasks.`AssigneeAccountID`,0) = COALESCE(paramAssigneeAccountID,tasks.`AssigneeAccountID`,0)
		AND COALESCE(tasks.`ReporterAccountID`,0) = COALESCE(paramReporterAccountID,tasks.`ReporterAccountID`,0)
		AND COALESCE(tasks.`StatusTypeID`,0) = COALESCE(paramStatusTypeID,tasks.`StatusTypeID`,0)
		AND COALESCE(tasks.`TaskTypeID`,0) = COALESCE(paramTaskTypeID,tasks.`TaskTypeID`,0)
		AND COALESCE(tasks.`PriorityTypeID`,0) = COALESCE(paramPriorityTypeID,tasks.`PriorityTypeID`,0)
		AND COALESCE(tasks.`ProjectID`,0) = COALESCE(paramProjectID,tasks.`ProjectID`,0)
		AND COALESCE(CAST(tasks.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(tasks.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(tasks.`CloseDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCloseDate AS DATE),CAST(tasks.`CloseDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(tasks.`ReopenDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramReopenDate AS DATE),CAST(tasks.`ReopenDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;



/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the comments table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`comments` (
CommentID INT AUTO_INCREMENT,
Description VARCHAR(1025),
AccountID INT,
TaskID INT,
CommentStatusTypeID INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_comments_CommentID PRIMARY KEY (CommentID)
,
CONSTRAINT fk_comments_AccountID_accounts_AccountID FOREIGN KEY (AccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_comments_TaskID_tasks_TaskID FOREIGN KEY (TaskID) REFERENCES tasks (TaskID)
,
CONSTRAINT fk_comments_CommentStatusTypeID_comstattypes_CommentStatusTypeID FOREIGN KEY (CommentStatusTypeID) REFERENCES commentstatustypes (CommentStatusTypeID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_comments_Load`
(
	 IN paramCommentID INT
)
BEGIN
	SELECT
		`comments`.`CommentID` AS `CommentID`,
		`comments`.`Description` AS `Description`,
		`comments`.`AccountID` AS `AccountID`,
		`comments`.`TaskID` AS `TaskID`,
		`comments`.`CommentStatusTypeID` AS `CommentStatusTypeID`,
		`comments`.`CreateDate` AS `CreateDate`,
		`comments`.`EditDate` AS `EditDate`
	FROM `comments`
	WHERE 		`comments`.`CommentID` = paramCommentID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_comments_LoadAll`()
BEGIN
	SELECT
		`comments`.`CommentID` AS `CommentID`,
		`comments`.`Description` AS `Description`,
		`comments`.`AccountID` AS `AccountID`,
		`comments`.`TaskID` AS `TaskID`,
		`comments`.`CommentStatusTypeID` AS `CommentStatusTypeID`,
		`comments`.`CreateDate` AS `CreateDate`,
		`comments`.`EditDate` AS `EditDate`
	FROM `comments`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_comments_Add`
(
	 IN paramDescription VARCHAR(1025),
	 IN paramAccountID INT,
	 IN paramTaskID INT,
	 IN paramCommentStatusTypeID INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `comments` (Description,AccountID,TaskID,CommentStatusTypeID,CreateDate,EditDate)
	VALUES (paramDescription, paramAccountID, paramTaskID, paramCommentStatusTypeID, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_comments_Update`
(
	IN paramCommentID INT,
	IN paramDescription VARCHAR(1025),
	IN paramAccountID INT,
	IN paramTaskID INT,
	IN paramCommentStatusTypeID INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `comments`
	SET Description = paramDescription
		,AccountID = paramAccountID
		,TaskID = paramTaskID
		,CommentStatusTypeID = paramCommentStatusTypeID
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`comments`.`CommentID` = paramCommentID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_comments_Delete`
(
	IN paramCommentID INT
)
BEGIN
	DELETE FROM `comments`
	WHERE		`comments`.`CommentID` = paramCommentID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_comments_Search`
(
	IN paramCommentID INT,
	IN paramDescription VARCHAR(1025),
	IN paramAccountID INT,
	IN paramTaskID INT,
	IN paramCommentStatusTypeID INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`comments`.`CommentID` AS `CommentID`,
		`comments`.`Description` AS `Description`,
		`comments`.`AccountID` AS `AccountID`,
		`comments`.`TaskID` AS `TaskID`,
		`comments`.`CommentStatusTypeID` AS `CommentStatusTypeID`,
		`comments`.`CreateDate` AS `CreateDate`,
		`comments`.`EditDate` AS `EditDate`
	FROM `comments`
	WHERE
		COALESCE(comments.`CommentID`,0) = COALESCE(paramCommentID,comments.`CommentID`,0)
		AND COALESCE(comments.`Description`,'') = COALESCE(paramDescription,comments.`Description`,'')
		AND COALESCE(comments.`AccountID`,0) = COALESCE(paramAccountID,comments.`AccountID`,0)
		AND COALESCE(comments.`TaskID`,0) = COALESCE(paramTaskID,comments.`TaskID`,0)
		AND COALESCE(comments.`CommentStatusTypeID`,0) = COALESCE(paramCommentStatusTypeID,comments.`CommentStatusTypeID`,0)
		AND COALESCE(CAST(comments.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(comments.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(comments.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(comments.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the notifications table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`notifications` (
NotificationID INT AUTO_INCREMENT,
NotificationTypeID INT,
AccountID INT,
CreateDate DATETIME,
SeenDate DATETIME,
Seen INT,
TaskID INT,
ProjectID INT,
CommentID INT,
CONSTRAINT pk_notifications_NotificationID PRIMARY KEY (NotificationID)
,
CONSTRAINT fk_notifications_NotificationTypeID_types_NotificationTypeID FOREIGN KEY (NotificationTypeID) REFERENCES notificationtypes (NotificationTypeID)
,
CONSTRAINT fk_notifications_AccountID_accounts_AccountID FOREIGN KEY (AccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_notifications_TaskID_tasks_TaskID FOREIGN KEY (TaskID) REFERENCES tasks (TaskID)
,
CONSTRAINT fk_notifications_ProjectID_projects_ProjectID FOREIGN KEY (ProjectID) REFERENCES projects (ProjectID)
,
CONSTRAINT fk_notifications_CommentID_comments_CommentID FOREIGN KEY (CommentID) REFERENCES comments (CommentID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Load`
(
	 IN paramNotificationID INT
)
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`CreateDate` AS `CreateDate`,
		`notifications`.`SeenDate` AS `SeenDate`,
		`notifications`.`Seen` AS `Seen`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`ProjectID` AS `ProjectID`,
		`notifications`.`CommentID` AS `CommentID`
	FROM `notifications`
	WHERE 		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_LoadAll`()
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`CreateDate` AS `CreateDate`,
		`notifications`.`SeenDate` AS `SeenDate`,
		`notifications`.`Seen` AS `Seen`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`ProjectID` AS `ProjectID`,
		`notifications`.`CommentID` AS `CommentID`
	FROM `notifications`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Add`
(
	 IN paramNotificationTypeID INT,
	 IN paramAccountID INT,
	 IN paramCreateDate DATETIME,
	 IN paramSeenDate DATETIME,
	 IN paramSeen INT,
	 IN paramTaskID INT,
	 IN paramProjectID INT,
	 IN paramCommentID INT
)
BEGIN
	INSERT INTO `notifications` (NotificationTypeID,AccountID,CreateDate,SeenDate,Seen,TaskID,ProjectID,CommentID)
	VALUES (paramNotificationTypeID, paramAccountID, paramCreateDate, paramSeenDate, paramSeen, paramTaskID, paramProjectID, paramCommentID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Update`
(
	IN paramNotificationID INT,
	IN paramNotificationTypeID INT,
	IN paramAccountID INT,
	IN paramCreateDate DATETIME,
	IN paramSeenDate DATETIME,
	IN paramSeen INT,
	IN paramTaskID INT,
	IN paramProjectID INT,
	IN paramCommentID INT
)
BEGIN
	UPDATE `notifications`
	SET NotificationTypeID = paramNotificationTypeID
		,AccountID = paramAccountID
		,CreateDate = paramCreateDate
		,SeenDate = paramSeenDate
		,Seen = paramSeen
		,TaskID = paramTaskID
		,ProjectID = paramProjectID
		,CommentID = paramCommentID
	WHERE		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Delete`
(
	IN paramNotificationID INT
)
BEGIN
	DELETE FROM `notifications`
	WHERE		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Search`
(
	IN paramNotificationID INT,
	IN paramNotificationTypeID INT,
	IN paramAccountID INT,
	IN paramCreateDate DATETIME,
	IN paramSeenDate DATETIME,
	IN paramSeen INT,
	IN paramTaskID INT,
	IN paramProjectID INT,
	IN paramCommentID INT
)
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`CreateDate` AS `CreateDate`,
		`notifications`.`SeenDate` AS `SeenDate`,
		`notifications`.`Seen` AS `Seen`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`ProjectID` AS `ProjectID`,
		`notifications`.`CommentID` AS `CommentID`
	FROM `notifications`
	WHERE
		COALESCE(notifications.`NotificationID`,0) = COALESCE(paramNotificationID,notifications.`NotificationID`,0)
		AND COALESCE(notifications.`NotificationTypeID`,0) = COALESCE(paramNotificationTypeID,notifications.`NotificationTypeID`,0)
		AND COALESCE(notifications.`AccountID`,0) = COALESCE(paramAccountID,notifications.`AccountID`,0)
		AND COALESCE(CAST(notifications.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(notifications.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(notifications.`SeenDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramSeenDate AS DATE),CAST(notifications.`SeenDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(notifications.`Seen`,0) = COALESCE(paramSeen,notifications.`Seen`,0)
		AND COALESCE(notifications.`TaskID`,0) = COALESCE(paramTaskID,notifications.`TaskID`,0)
		AND COALESCE(notifications.`ProjectID`,0) = COALESCE(paramProjectID,notifications.`ProjectID`,0)
		AND COALESCE(notifications.`CommentID`,0) = COALESCE(paramCommentID,notifications.`CommentID`,0);
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/19/2017
Description:	Creates the teamstoaccounts table and respective stored procedures

*/


USE tasktracker;




-- Create table




CREATE TABLE `tasktracker`.`teamstoaccounts` (
TeamToAccountID INT AUTO_INCREMENT,
TeamID INT,
AccountID INT,
CONSTRAINT pk_teamstoaccounts_TeamToAccountID PRIMARY KEY (TeamToAccountID)
,
CONSTRAINT fk_teamstoaccounts_TeamID_teams_TeamID FOREIGN KEY (TeamID) REFERENCES teams (TeamID)
,
CONSTRAINT fk_teamstoaccounts_AccountID_accounts_AccountID FOREIGN KEY (AccountID) REFERENCES accounts (AccountID)
);



-- Create default SCRUD sprocs for this table



DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teamstoaccounts_Load`
(
	 IN paramTeamToAccountID INT
)
BEGIN
	SELECT
		`teamstoaccounts`.`TeamToAccountID` AS `TeamToAccountID`,
		`teamstoaccounts`.`TeamID` AS `TeamID`,
		`teamstoaccounts`.`AccountID` AS `AccountID`
	FROM `teamstoaccounts`
	WHERE 		`teamstoaccounts`.`TeamToAccountID` = paramTeamToAccountID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teamstoaccounts_LoadAll`()
BEGIN
	SELECT
		`teamstoaccounts`.`TeamToAccountID` AS `TeamToAccountID`,
		`teamstoaccounts`.`TeamID` AS `TeamID`,
		`teamstoaccounts`.`AccountID` AS `AccountID`
	FROM `teamstoaccounts`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teamstoaccounts_Add`
(
	 IN paramTeamID INT,
	 IN paramAccountID INT
)
BEGIN
	INSERT INTO `teamstoaccounts` (TeamID,AccountID)
	VALUES (paramTeamID, paramAccountID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teamstoaccounts_Update`
(
	IN paramTeamToAccountID INT,
	IN paramTeamID INT,
	IN paramAccountID INT
)
BEGIN
	UPDATE `teamstoaccounts`
	SET TeamID = paramTeamID
		,AccountID = paramAccountID
	WHERE		`teamstoaccounts`.`TeamToAccountID` = paramTeamToAccountID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teamstoaccounts_Delete`
(
	IN paramTeamToAccountID INT
)
BEGIN
	DELETE FROM `teamstoaccounts`
	WHERE		`teamstoaccounts`.`TeamToAccountID` = paramTeamToAccountID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_teamstoaccounts_Search`
(
	IN paramTeamToAccountID INT,
	IN paramTeamID INT,
	IN paramAccountID INT
)
BEGIN
	SELECT
		`teamstoaccounts`.`TeamToAccountID` AS `TeamToAccountID`,
		`teamstoaccounts`.`TeamID` AS `TeamID`,
		`teamstoaccounts`.`AccountID` AS `AccountID`
	FROM `teamstoaccounts`
	WHERE
		COALESCE(teamstoaccounts.`TeamToAccountID`,0) = COALESCE(paramTeamToAccountID,teamstoaccounts.`TeamToAccountID`,0)
		AND COALESCE(teamstoaccounts.`TeamID`,0) = COALESCE(paramTeamID,teamstoaccounts.`TeamID`,0)
		AND COALESCE(teamstoaccounts.`AccountID`,0) = COALESCE(paramAccountID,teamstoaccounts.`AccountID`,0);
END //
DELIMITER ;


