/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			11/19/2017
Description:	Creates the notifications table and respective stored procedures

*/


USE tasktracker;



--------------------------------------------------------------
-- Create table
--------------------------------------------------------------



CREATE TABLE `tasktracker`.`notifications` (
NotificationID INT AUTO_INCREMENT,
NotificationTypeID INT,
AccountID INT,
CreateDate DATETIME,
SeenDate DATETIME,
Seen INT,
TaskID INT,
ProjectID INT,
CommentID INT,
CONSTRAINT pk_notifications_NotificationID PRIMARY KEY (NotificationID)
,
CONSTRAINT fk_notifications_NotificationTypeID_types_NotificationTypeID FOREIGN KEY (NotificationTypeID) REFERENCES notificationtypes (NotificationTypeID)
,
CONSTRAINT fk_notifications_AccountID_accounts_AccountID FOREIGN KEY (AccountID) REFERENCES accounts (AccountID)
,
CONSTRAINT fk_notifications_TaskID_tasks_TaskID FOREIGN KEY (TaskID) REFERENCES tasks (TaskID)
,
CONSTRAINT fk_notifications_ProjectID_projects_ProjectID FOREIGN KEY (ProjectID) REFERENCES projects (ProjectID)
,
CONSTRAINT fk_notifications_CommentID_comments_CommentID FOREIGN KEY (CommentID) REFERENCES comments (CommentID)
);


--------------------------------------------------------------
-- Create default SCRUD sprocs for this table
--------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Load`
(
	 IN paramNotificationID INT
)
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`CreateDate` AS `CreateDate`,
		`notifications`.`SeenDate` AS `SeenDate`,
		`notifications`.`Seen` AS `Seen`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`ProjectID` AS `ProjectID`,
		`notifications`.`CommentID` AS `CommentID`
	FROM `notifications`
	WHERE 		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_LoadAll`()
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`CreateDate` AS `CreateDate`,
		`notifications`.`SeenDate` AS `SeenDate`,
		`notifications`.`Seen` AS `Seen`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`ProjectID` AS `ProjectID`,
		`notifications`.`CommentID` AS `CommentID`
	FROM `notifications`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Add`
(
	 IN paramNotificationTypeID INT,
	 IN paramAccountID INT,
	 IN paramCreateDate DATETIME,
	 IN paramSeenDate DATETIME,
	 IN paramSeen INT,
	 IN paramTaskID INT,
	 IN paramProjectID INT,
	 IN paramCommentID INT
)
BEGIN
	INSERT INTO `notifications` (NotificationTypeID,AccountID,CreateDate,SeenDate,Seen,TaskID,ProjectID,CommentID)
	VALUES (paramNotificationTypeID, paramAccountID, paramCreateDate, paramSeenDate, paramSeen, paramTaskID, paramProjectID, paramCommentID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Update`
(
	IN paramNotificationID INT,
	IN paramNotificationTypeID INT,
	IN paramAccountID INT,
	IN paramCreateDate DATETIME,
	IN paramSeenDate DATETIME,
	IN paramSeen INT,
	IN paramTaskID INT,
	IN paramProjectID INT,
	IN paramCommentID INT
)
BEGIN
	UPDATE `notifications`
	SET NotificationTypeID = paramNotificationTypeID
		,AccountID = paramAccountID
		,CreateDate = paramCreateDate
		,SeenDate = paramSeenDate
		,Seen = paramSeen
		,TaskID = paramTaskID
		,ProjectID = paramProjectID
		,CommentID = paramCommentID
	WHERE		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Delete`
(
	IN paramNotificationID INT
)
BEGIN
	DELETE FROM `notifications`
	WHERE		`notifications`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tasktracker`.`usp_notifications_Search`
(
	IN paramNotificationID INT,
	IN paramNotificationTypeID INT,
	IN paramAccountID INT,
	IN paramCreateDate DATETIME,
	IN paramSeenDate DATETIME,
	IN paramSeen INT,
	IN paramTaskID INT,
	IN paramProjectID INT,
	IN paramCommentID INT
)
BEGIN
	SELECT
		`notifications`.`NotificationID` AS `NotificationID`,
		`notifications`.`NotificationTypeID` AS `NotificationTypeID`,
		`notifications`.`AccountID` AS `AccountID`,
		`notifications`.`CreateDate` AS `CreateDate`,
		`notifications`.`SeenDate` AS `SeenDate`,
		`notifications`.`Seen` AS `Seen`,
		`notifications`.`TaskID` AS `TaskID`,
		`notifications`.`ProjectID` AS `ProjectID`,
		`notifications`.`CommentID` AS `CommentID`
	FROM `notifications`
	WHERE
		COALESCE(notifications.`NotificationID`,0) = COALESCE(paramNotificationID,notifications.`NotificationID`,0)
		AND COALESCE(notifications.`NotificationTypeID`,0) = COALESCE(paramNotificationTypeID,notifications.`NotificationTypeID`,0)
		AND COALESCE(notifications.`AccountID`,0) = COALESCE(paramAccountID,notifications.`AccountID`,0)
		AND COALESCE(CAST(notifications.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(notifications.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(notifications.`SeenDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramSeenDate AS DATE),CAST(notifications.`SeenDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(notifications.`Seen`,0) = COALESCE(paramSeen,notifications.`Seen`,0)
		AND COALESCE(notifications.`TaskID`,0) = COALESCE(paramTaskID,notifications.`TaskID`,0)
		AND COALESCE(notifications.`ProjectID`,0) = COALESCE(paramProjectID,notifications.`ProjectID`,0)
		AND COALESCE(notifications.`CommentID`,0) = COALESCE(paramCommentID,notifications.`CommentID`,0);
END //
DELIMITER ;


